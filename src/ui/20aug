// src/Chatsystem.jsx

import React, { createElement, useEffect } from 'react';
import { useEditor, EditorContent } from '@tiptap/react';
import StarterKit from '@tiptap/starter-kit';
import Mention from '@tiptap/extension-mention';
import Link from '@tiptap/extension-link';
import { ReactRenderer } from '@tiptap/react';
import tippy from 'tippy.js';
import 'tippy.js/dist/tippy.css';
import './Chatsystem.css'; // Ensure you have this file for custom styles

// Sample mention items
const mentionItems = [
  { id: 1, label: 'Alice' },
  { id: 2, label: 'Bob' },
  { id: 3, label: 'Charlie' },
];

// Custom mention list component
const MentionList = ({ items, command }) => (
  <div className="mention-list">
    {items.map((item, index) => (
      <button
        key={index}
        onClick={() => command(item)}
        className="mention-item"
      >
        {item.label}
      </button>
    ))}
  </div>
);

// Main Chatsystem component
export const Chatsystem = ({ InputMessage }) => {
  const editor = useEditor({
    extensions: [
      StarterKit,
      Link.configure({
        openOnClick: true,
        autolink: true,
        linkOnPaste: true,
      }),
      Mention.configure({
        suggestion: {
          items: ({ query }) =>
            mentionItems.filter((item) =>
              item.label.toLowerCase().includes(query.toLowerCase())
            ),
          render: () => {
            let component;
            let popup;

            return {
              onStart: (props) => {
                component = new ReactRenderer(MentionList, {
                  props,
                  editor: props.editor,
                });

                popup = tippy('body', {
                  getReferenceClientRect: props.clientRect,
                  appendTo: () => document.body,
                  content: component.element,
                  showOnCreate: true,
                  interactive: true,
                });
              },
              onUpdate: (props) => {
                component.updateProps(props);
                popup[0].setProps({
                  getReferenceClientRect: props.clientRect,
                });
              },
              onKeyDown: (props) => {
                if (props.event.key === 'Escape') {
                  popup[0].hide();
                  return true;
                }
                return component.ref.onKeyDown(props);
              },
              onExit: () => {
                popup[0].destroy();
                component.destroy();
              },
            };
          },
        },
      }),
    ],
    content: InputMessage || '<p>Start typing with @ to mention someone...</p>',
    onUpdate: ({ editor }) => {
      const content = editor.getHTML();
      if (InputMessage && typeof InputMessage.setValue === 'function') {
        InputMessage.setValue(content);
      }
    },
  });

  useEffect(() => {
    if (editor && InputMessage && typeof InputMessage.getValue === 'function') {
      const currentContent = InputMessage.getValue();
      if (currentContent) {
        editor.commands.setContent(currentContent);
      }
    }
  }, [editor, InputMessage]);

  return (
    <div className="chatsystem-container">
      <EditorContent editor={editor} className="editor-content" />
    </div>
  );
};
